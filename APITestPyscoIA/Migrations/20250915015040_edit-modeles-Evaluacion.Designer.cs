// <auto-generated />
using System;
using APITestPyscoIA.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APITestPyscoIA.Migrations
{
    [DbContext(typeof(DatosDbContext))]
    [Migration("20250915015040_edit-modeles-Evaluacion")]
    partial class editmodelesEvaluacion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.CiudadModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("IdProvincia")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdProvincia");

                    b.ToTable("Ciudades");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ConfiguracionOpcionesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("IdConfiguracionPreguntas")
                        .HasColumnType("int");

                    b.Property<string>("Opcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<decimal>("Peso")
                        .HasPrecision(8, 4)
                        .HasColumnType("decimal(8,4)");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdConfiguracionPreguntas");

                    b.ToTable("ConfiguracionesOpciones");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ConfiguracionPreguntasModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("IdConfiguracionSecciones")
                        .HasColumnType("int");

                    b.Property<bool>("Inversa")
                        .HasColumnType("bit");

                    b.Property<string>("Pregunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdConfiguracionSecciones");

                    b.ToTable("ConfiguracionesPreguntas");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ConfiguracionSeccionesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("FormulaAgregado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdConfiguracionesTest")
                        .HasColumnType("int");

                    b.Property<int>("NumeroPreguntas")
                        .HasColumnType("int");

                    b.Property<string>("Seccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdConfiguracionesTest");

                    b.ToTable("ConfiguracionesSecciones");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ConfiguracionTestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duracion")
                        .HasColumnType("int");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("IdTipoTest")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoTest");

                    b.ToTable("ConfiguracionesTest");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.EvaluacionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<int>("CantidadPreguntas")
                        .HasColumnType("int");

                    b.Property<bool?>("Completado")
                        .HasColumnType("bit");

                    b.Property<int?>("Contestadas")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Duracion")
                        .HasColumnType("int");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaFinTest")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicioTest")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdConfiguracionTest")
                        .HasColumnType("int");

                    b.Property<int>("IdEvaluador")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<bool?>("Iniciado")
                        .HasColumnType("bit");

                    b.Property<int?>("NoContestadas")
                        .HasColumnType("int");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.Property<int?>("TiempoTranscurrido")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdConfiguracionTest");

                    b.HasIndex("IdEvaluador");

                    b.HasIndex("IdPaciente");

                    b.ToTable("Evaluaciones");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.EvaluadorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("IdCiudad");

                    b.ToTable("Evaluadores");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.PacienteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdCiudad");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.PaisModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.PreguntasModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("IdConfiguracionBancoPreguntas")
                        .HasColumnType("int");

                    b.Property<int>("IdSecciones")
                        .HasColumnType("int");

                    b.Property<string>("Pregunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.Property<int?>("TestSeccionesId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasPrecision(8, 4)
                        .HasColumnType("decimal(8,4)");

                    b.HasKey("Id");

                    b.HasIndex("IdConfiguracionBancoPreguntas");

                    b.HasIndex("TestSeccionesId");

                    b.ToTable("Preguntas");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ProvinciaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("IdPais")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdPais");

                    b.ToTable("Provincias");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.SeccionesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int?>("EvaluacionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFinTest")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicioTest")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdConfiguracionSecciones")
                        .HasColumnType("int");

                    b.Property<int>("IdEvaluaciones")
                        .HasColumnType("int");

                    b.Property<string>("Resultado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Score")
                        .HasColumnType("real");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EvaluacionId");

                    b.HasIndex("IdConfiguracionSecciones");

                    b.ToTable("Secciones");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.TipoTestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Instrucciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Sincronizado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TipoTest");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.CiudadModel", b =>
                {
                    b.HasOne("APITestPyscoIA.Models.Entidades.ProvinciaModel", "Provincia")
                        .WithMany("Ciudades")
                        .HasForeignKey("IdProvincia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ConfiguracionOpcionesModel", b =>
                {
                    b.HasOne("APITestPyscoIA.Models.Entidades.ConfiguracionPreguntasModel", "ConfiguracionPreguntas")
                        .WithMany("Opciones")
                        .HasForeignKey("IdConfiguracionPreguntas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfiguracionPreguntas");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ConfiguracionPreguntasModel", b =>
                {
                    b.HasOne("APITestPyscoIA.Models.Entidades.ConfiguracionSeccionesModel", "ConfiguracionSecciones")
                        .WithMany("BancoPreguntas")
                        .HasForeignKey("IdConfiguracionSecciones")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfiguracionSecciones");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ConfiguracionSeccionesModel", b =>
                {
                    b.HasOne("APITestPyscoIA.Models.Entidades.ConfiguracionTestModel", "ConfiguracionTest")
                        .WithMany("ConfiguracionesSecciones")
                        .HasForeignKey("IdConfiguracionesTest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfiguracionTest");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ConfiguracionTestModel", b =>
                {
                    b.HasOne("APITestPyscoIA.Models.Entidades.TipoTestModel", "TipoTest")
                        .WithMany()
                        .HasForeignKey("IdTipoTest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoTest");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.EvaluacionModel", b =>
                {
                    b.HasOne("APITestPyscoIA.Models.Entidades.ConfiguracionTestModel", "ConfiguracionTest")
                        .WithMany()
                        .HasForeignKey("IdConfiguracionTest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APITestPyscoIA.Models.Entidades.EvaluadorModel", "Evaluador")
                        .WithMany("Evaluaciones")
                        .HasForeignKey("IdEvaluador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APITestPyscoIA.Models.Entidades.PacienteModel", "Paciente")
                        .WithMany()
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfiguracionTest");

                    b.Navigation("Evaluador");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.EvaluadorModel", b =>
                {
                    b.HasOne("APITestPyscoIA.Models.Entidades.CiudadModel", "Ciudad")
                        .WithMany()
                        .HasForeignKey("IdCiudad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.PacienteModel", b =>
                {
                    b.HasOne("APITestPyscoIA.Models.Entidades.CiudadModel", "Ciudad")
                        .WithMany()
                        .HasForeignKey("IdCiudad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.PreguntasModel", b =>
                {
                    b.HasOne("APITestPyscoIA.Models.Entidades.ConfiguracionPreguntasModel", "ConfiguracionPreguntas")
                        .WithMany()
                        .HasForeignKey("IdConfiguracionBancoPreguntas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APITestPyscoIA.Models.Entidades.SeccionesModel", "TestSecciones")
                        .WithMany("Preguntas")
                        .HasForeignKey("TestSeccionesId");

                    b.Navigation("ConfiguracionPreguntas");

                    b.Navigation("TestSecciones");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ProvinciaModel", b =>
                {
                    b.HasOne("APITestPyscoIA.Models.Entidades.PaisModel", "Pais")
                        .WithMany("Provincias")
                        .HasForeignKey("IdPais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.SeccionesModel", b =>
                {
                    b.HasOne("APITestPyscoIA.Models.Entidades.EvaluacionModel", "Evaluacion")
                        .WithMany("Secciones")
                        .HasForeignKey("EvaluacionId");

                    b.HasOne("APITestPyscoIA.Models.Entidades.ConfiguracionSeccionesModel", "ConfiguracionSecciones")
                        .WithMany()
                        .HasForeignKey("IdConfiguracionSecciones")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfiguracionSecciones");

                    b.Navigation("Evaluacion");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ConfiguracionPreguntasModel", b =>
                {
                    b.Navigation("Opciones");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ConfiguracionSeccionesModel", b =>
                {
                    b.Navigation("BancoPreguntas");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ConfiguracionTestModel", b =>
                {
                    b.Navigation("ConfiguracionesSecciones");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.EvaluacionModel", b =>
                {
                    b.Navigation("Secciones");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.EvaluadorModel", b =>
                {
                    b.Navigation("Evaluaciones");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.PaisModel", b =>
                {
                    b.Navigation("Provincias");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.ProvinciaModel", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("APITestPyscoIA.Models.Entidades.SeccionesModel", b =>
                {
                    b.Navigation("Preguntas");
                });
#pragma warning restore 612, 618
        }
    }
}
